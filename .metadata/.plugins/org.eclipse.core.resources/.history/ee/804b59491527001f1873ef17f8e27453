package com.inventory.myserviceimpl;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.inventory.mydto.TSFCombinedDto;
import com.inventory.mydto.TsfDetailsDto;
import com.inventory.mydto.TsfDetailsGetReceivingDto;
import com.inventory.mydto.TsfDetailsShipmentDto;
import com.inventory.mydto.TsfOrderAcceptanceDto;
import com.inventory.mydto.TsfSaveReceivingDto;
import com.inventory.myentity.TsfDetails;
import com.inventory.myentity.TsfHead;
import com.inventory.myentity.TsfReasonCodes;
import com.inventory.myrepository.ProductDetailsRepo;
import com.inventory.myrepository.ProductRepo;
import com.inventory.myrepository.StoreRepo;
import com.inventory.myrepository.TsfDetailsRepo;
import com.inventory.myrepository.TsfHeadRepo;
import com.inventory.myrepository.TsfReasonCodesRepo;
import com.inventory.myservice.TransferReceiveService;

@Service
public class TransferReceiveServiceImpl implements TransferReceiveService {

	@Autowired
	private TsfHeadRepo tsfHeadRepo;

	@Autowired
	private StoreRepo storeRepo;

	@Autowired
	private TsfDetailsRepo tsfDetailsRepo;

	@Autowired
	private TsfReasonCodesRepo tsfReasonCodesRepo;

	@Autowired
	private ProductRepo productRepo;

	@Autowired
	private ProductDetailsRepo productDetailsRepo;

	// function to get All TSF Reason Codes
	@Override
	public List<TsfReasonCodes> getTsfReasonCodes() {
		List<TsfReasonCodes> tsfReasonCodes = tsfReasonCodesRepo.findAll();
		return tsfReasonCodes;
	}

	// Function to create Transfer
	@Override
	public String createTansfer(TSFCombinedDto tsfCombinedDto, String tsfID) {

		TsfHead tsf = new TsfHead(tsfID, tsfCombinedDto.getTsfHeadDto().getStoreFrom(),
				tsfCombinedDto.getTsfHeadDto().getStoreTo(), tsfCombinedDto.getTsfHeadDto().getReasonCode(),
				tsfCombinedDto.getTsfHeadDto().getStatus(), tsfCombinedDto.getTsfHeadDto().getAttachedProof(),
				tsfCombinedDto.getTsfHeadDto().getTotalReqQty(), tsfCombinedDto.getTsfHeadDto().getCreationDate(), null,
				tsfCombinedDto.getTsfHeadDto().getNotAfter(), tsfCombinedDto.getTsfHeadDto().getNotBefore(), null,
				null);

		tsf = tsfHeadRepo.save(tsf);

		List<TsfDetails> tsfProducts = new ArrayList<>();
		for (int i = 0; i < tsfCombinedDto.getTsfDetailsDto().size(); i++) {
			tsfProducts.add(new TsfDetails(tsfCombinedDto.getTsfDetailsDto().get(i).getItemNumber(),
					tsfCombinedDto.getTsfDetailsDto().get(i).getItemName(),
					tsfCombinedDto.getTsfDetailsDto().get(i).getCategory(),
					tsfCombinedDto.getTsfDetailsDto().get(i).getColor(),
					tsfCombinedDto.getTsfDetailsDto().get(i).getPrice(),
					tsfCombinedDto.getTsfDetailsDto().get(i).getSize(),
					tsfCombinedDto.getTsfDetailsDto().get(i).getRequestedQty(), 0, 0, 0, 0, null,
					tsfCombinedDto.getTsfDetailsDto().get(i).getImageData(),
					tsfCombinedDto.getTsfDetailsDto().get(i).getUpc(),
					tsfCombinedDto.getTsfDetailsDto().get(i).getSku(),
					tsfCombinedDto.getTsfDetailsDto().get(i).getTaxPercentage(),
					tsfCombinedDto.getTsfDetailsDto().get(i).getTaxCode(), tsf));
		}

		tsfDetailsRepo.saveAll(tsfProducts);
		return "Transfer created successfully";
	}

	@Override
	public String generateTsfId() {
		final String CHARACTERS = "0123456789";
		final SecureRandom random = new SecureRandom();
		StringBuilder sb = new StringBuilder(10);
		sb.append("TSF");
		for (int i = 0; i < 12; i++) {
			sb.append(CHARACTERS.charAt(random.nextInt(CHARACTERS.length())));

		}
		return sb.toString();
	}

	// function to get IN Transfers
	@Override
	public List<TsfHead> getInTransfers(String store) {
		List<TsfHead> inTransfers = tsfHeadRepo.findAllByStoreTo(store);
		return inTransfers;
	}

	// function to get OUT Transfers
	@Override
	public List<TsfHead> getOutTransfers(String store) {
		List<TsfHead> outTransfers = tsfHeadRepo.findAllByStoreFrom(store);
		// System.out.println("outTransfers -- " + outTransfers);
		return outTransfers;
	}

	// Function to get TSF products by TSF Id -- Order Fulfillment
	@Override
	public List<TsfDetailsDto> getTsfProductsById(String TsfId) {
		TsfHead tsf = tsfHeadRepo.findByTsfId(TsfId);
		List<TsfDetails> tsfProds = tsfDetailsRepo.findByTsfHead(tsf);
		List<TsfDetailsDto> tsfDetailsDto = new ArrayList<>();

		for (int i = 0; i < tsfProds.size(); i++) {
			tsfDetailsDto.add(new TsfDetailsDto(tsfProds.get(i).getItemNumber(), tsfProds.get(i).getItemName(),
					tsfProds.get(i).getCategory(), tsfProds.get(i).getColor(), tsfProds.get(i).getPrice(),
					tsfProds.get(i).getSize(), tsfProds.get(i).getRequestedQty(), tsfProds.get(i).getImageData(),
					tsfProds.get(i).getUpc(), tsfProds.get(i).getSku(), tsfProds.get(i).getTaxPercentage(),
					tsfProds.get(i).getTaxCode()));
		}
		return tsfDetailsDto;

	}

	// Function to get TSF products for shipment by TSF Id -- Order Fulfillment
	@Override
	public List<TsfDetailsShipmentDto> getTsfProductsByIdForShipment(String TsfId) {
		TsfHead tsf = tsfHeadRepo.findByTsfId(TsfId);
		List<TsfDetails> tsfProds = tsfDetailsRepo.findByTsfHead(tsf);
		List<TsfDetailsShipmentDto> tsfDetailsDto = new ArrayList<>();

		for (int i = 0; i < tsfProds.size(); i++) {
			tsfDetailsDto.add(new TsfDetailsShipmentDto(tsfProds.get(i).getItemNumber(), tsfProds.get(i).getItemName(),
					tsfProds.get(i).getCategory(), tsfProds.get(i).getColor(), tsfProds.get(i).getPrice(),
					tsfProds.get(i).getSize(), tsfProds.get(i).getRequestedQty(), tsfProds.get(i).getApprovedQty(),
					tsfProds.get(i).getImageData(), tsfProds.get(i).getUpc(), tsfProds.get(i).getSku(),
					tsfProds.get(i).getTaxPercentage(), tsfProds.get(i).getTaxCode()));
		}
		return tsfDetailsDto;

	}

	// Function to update TSFHead and Details on Acceptance And Rejection -- Order
	// Fulfillment
	@Override
	public String updateTsfHeadandTsfDetails(TsfOrderAcceptanceDto tsfOrderAcceptanceDto) {

		TsfHead tsf = tsfHeadRepo.findByTsfId(tsfOrderAcceptanceDto.getTsfId());
		tsf.setStatus(tsfOrderAcceptanceDto.getStatus());
		tsf.setApprovedDate(tsfOrderAcceptanceDto.getDate());
		tsfHeadRepo.save(tsf);

		tsfOrderAcceptanceDto.getTsfDetailsUpdationDto().stream().map(item -> {
			TsfDetails tsfProduct = tsfDetailsRepo.findByTsfHeadAndSku(tsf, item.getSku());
			tsfProduct.setApprovedQty(item.getQty());
			tsfDetailsRepo.save(tsfProduct);
			return tsfProduct;
		}).collect(Collectors.toList());

		return "Details Updated Successfully";

	}

	// Function to update TSFHead and Details on Acceptance And Rejection -- Order
	// Fulfillment
	@Override
	public String ShipTsf(TsfOrderAcceptanceDto tsfOrderAcceptanceDto) {

		TsfHead tsf = tsfHeadRepo.findByTsfId(tsfOrderAcceptanceDto.getTsfId());
		tsf.setStatus(tsfOrderAcceptanceDto.getStatus());
		tsfHeadRepo.save(tsf);

		tsfOrderAcceptanceDto.getTsfDetailsUpdationDto().stream().map(item -> {

			TsfDetails tsfProduct = tsfDetailsRepo.findByTsfHeadAndSku(tsf, item.getSku());
			tsfProduct.setShippedQty(item.getQty());
			tsfDetailsRepo.save(tsfProduct);
			return tsfProduct;
		}).collect(Collectors.toList());

		return "TSF Shipped Successfully";

	}

	// Function to get TSF to receive -- Transfer Receiving
	@Override
	public List<TsfDetailsGetReceivingDto> getTsfToReceive(String tsfId) {

		TsfHead tsf = tsfHeadRepo.findByTsfId(tsfId);

		List<TsfDetails> tsfProds = tsfDetailsRepo.findByTsfHead(tsf);
		List<TsfDetailsGetReceivingDto> tsfDetailsDto = new ArrayList<>();

		for (int i = 0; i < tsfProds.size(); i++) {
			tsfDetailsDto.add(new TsfDetailsGetReceivingDto(tsfProds.get(i).getItemNumber(),
					tsfProds.get(i).getItemName(), tsfProds.get(i).getCategory(), tsfProds.get(i).getColor(),
					tsfProds.get(i).getPrice(), tsfProds.get(i).getSize(), tsfProds.get(i).getRequestedQty(),
					tsfProds.get(i).getApprovedQty(), tsfProds.get(i).getShippedQty(), tsfProds.get(i).getImageData(),
					tsfProds.get(i).getUpc(), tsfProds.get(i).getSku(), tsfProds.get(i).getTaxPercentage(),
					tsfProds.get(i).getTaxCode()));
		}
		return tsfDetailsDto;

	}

	// Function to save TSF In Master and Update Receiving Qty
	@Override
	public String SaveTSF(TsfSaveReceivingDto tsfSaveReceivingDto) {

		TsfHead tsf = tsfHeadRepo.findByTsfId(tsfSaveReceivingDto.getTsfId());
		tsf.setStatus(tsfSaveReceivingDto.getStatus());
		tsf.setDeliveryDate(tsfSaveReceivingDto.getDate());
		tsf.setAttachedProof(tsfSaveReceivingDto.getAttachedProof());
		tsfHeadRepo.save(tsf);

		tsfSaveReceivingDto.getTsfDetailsSaveDto().stream().map(item -> {
			TsfDetails tsfProduct = tsfDetailsRepo.findByTsfHeadAndSku(tsf, item.getSku());
			tsfProduct.setReceivedQty(tsfProduct.getReceivedQty() + item.getReceivedQty());
			tsfProduct.setDamageQty(tsfProduct.getDamageQty() + item.getDamageQty());
			tsfProduct.setDamageProof(item.getDamageProof());
			tsfDetailsRepo.save(tsfProduct);
			return tsfProduct;
		}).collect(Collectors.toList());

		return "TSF Saved Successfully";

	}
}
