
package com.inventory.myserviceimpl;

import java.security.SecureRandom;

import java.time.LocalDate;
import java.util.ArrayList;

import java.util.List;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Service;

import com.inventory.mydto.InventoryAdjustmentProductsdto;
import com.inventory.mydto.SCLandingDto;
import com.inventory.mydto.StockCountAdhocCreationCombinedDto;
import com.inventory.mydto.StockCountCombinedDto;
import com.inventory.mydto.StockCountCreationDto;
import com.inventory.mydto.StockCountUpdateCombinedDto;
import com.inventory.myentity.ProductDetails;
import com.inventory.myentity.StockCountCreation;
import com.inventory.myentity.StockCountCreationProducts;
import com.inventory.myentity.StockCountReasonCodes;
import com.inventory.myentity.Stores;
import com.inventory.myexception.ExceptionHandling;
import com.inventory.myrepository.ProductDetailsRepo;
import com.inventory.myrepository.StockCountReasonCodesRepo;
import com.inventory.myrepository.StockCreationProductsRepo;
import com.inventory.myrepository.StockCreationRepo;
import com.inventory.myrepository.StoreRepo;
import com.inventory.myservice.StockCountCreationService;

import jakarta.transaction.Transactional;

@Service
public class StockCountCreationServiceImpl implements StockCountCreationService {

	@Autowired
	private StockCreationRepo creationRepo;

	@Autowired
	private StockCreationProductsRepo creationProductsRepo;

	@Autowired
	private ProductDetailsRepo productDetailsRepo;

	@Autowired
	private StoreRepo storeRepo;

	@Autowired
	private StockCountReasonCodesRepo scReasonCodesRepo;

	// Function to create system generated stock Count
	@Override
	public String createSystemStockCount(String storeName, LocalDate startDate, LocalDate endDate) {

		Stores store = storeRepo.findByStoreName(storeName);
		if (store != null) {
			String countId = generateScIdString();
			StockCountCreation sc = new StockCountCreation();
			sc.setCountId(countId);
			sc.setStartDate(startDate);
			sc.setEndDate(endDate);
			sc.setCreationDate(LocalDate.now());
			sc.setStore(storeName);
			sc.setStatus("pending");
			sc.setRecountStatus("pending");
			creationRepo.save(sc);

			return countId;
		} else {
			throw new ExceptionHandling(HttpStatus.NOT_FOUND, "Please add the appropriate store ");
		}

	}

	// Function to add products in system generated stock count
	@Transactional
	@Override
	public String saveSystemCountProducts(StockCountCreationDto creationDto) {

		StockCountCreation stockCount = creationRepo.findByCountId(creationDto.getId());

		if (stockCount.getStatus().equals("pending") && stockCount.getRecountStatus().equals("pending")) {
			stockCount.setReason(creationDto.getReason());
			stockCount.setCategory(creationDto.getCategory());

			creationRepo.save(stockCount);

			int totalBookQty = 0;

			Stores store1 = storeRepo.findByStoreName(stockCount.getStore());
			for (int i = 0; i < creationDto.getCreationProductsDto().size(); i++) {
				StockCountCreationProducts ScProducts = new StockCountCreationProducts();
				ProductDetails Product = productDetailsRepo
						.findBySkuAndStore(creationDto.getCreationProductsDto().get(i).getSku(), store1);

				if (Product != null) {
					ScProducts.setSku(creationDto.getCreationProductsDto().get(i).getSku());
					ScProducts.setUpc(creationDto.getCreationProductsDto().get(i).getUpc());
					ScProducts.setBookQty(Product.getSellableStock());
					ScProducts.setStockcount(stockCount);

					totalBookQty = totalBookQty + Product.getSellableStock();
					creationProductsRepo.save(ScProducts);
				} else {
					throw new ExceptionHandling(HttpStatus.NOT_FOUND, "Incorrect sku found ");
				}
			}

			stockCount.setTotalBookQty(totalBookQty);
			creationRepo.save(stockCount);

		}
		return "Products saved successfully";
	}

	// Function to get all stock counts
	@Override
	public List<SCLandingDto> getAllStockCount() {

		List<StockCountCreation> stockCounts = creationRepo.findAll();

		List<SCLandingDto> stockCountsDto = new ArrayList<>();
		for (int i = 0; i < stockCounts.size(); i++) {

			stockCountsDto.add(new SCLandingDto(stockCounts.get(i).getCountId(), stockCounts.get(i).getStartDate(),
					stockCounts.get(i).getStatus(), stockCounts.get(i).getTotalBookQty(),
					stockCounts.get(i).getReason(), "SC"));
		}
		return stockCountsDto;
	}

	// Function to get products by count id
	@Override
	public StockCountCombinedDto getStockCountProductsByCountId(String countId) {

		StockCountCreation stockCount = creationRepo.findByCountId(countId);
		List<StockCountCreationProducts> scProducts = creationProductsRepo.findByStockcount(stockCount);
		List<InventoryAdjustmentProductsdto> itemsDto = new ArrayList<>();

		Stores store = storeRepo.findByStoreName(stockCount.getStore());
		for (int i = 0; i < scProducts.size(); i++) {
			ProductDetails product = productDetailsRepo.findBySkuAndStore(scProducts.get(i).getSku(), store);
			itemsDto.add(new InventoryAdjustmentProductsdto(product.getProduct().getItemNumber(),
					product.getProduct().getitemName(), product.getProduct().getCategory().getCategory(),
					product.getColor(), product.getSize(), product.getSku(), product.getUpc(),
					scProducts.get(i).getBookQty(), null, product.getImageData(), "SC"));
		}

		StockCountCombinedDto scDto = new StockCountCombinedDto(countId, stockCount.getStartDate(),
				stockCount.getEndDate(), stockCount.getCreationDate(), stockCount.getCategory(),
				stockCount.getTotalBookQty(), stockCount.getReason(), stockCount.getStatus(),
				stockCount.getTotalVarianceQty(), itemsDto);

		return scDto;

	}

	// Function to update qty in stock count products
	@Override
	public String updateStockCount(StockCountUpdateCombinedDto ScUpdateCombinedDto) {

		StockCountCreation stockCount = creationRepo.findByCountId(ScUpdateCombinedDto.getId());

		if ((stockCount.getStatus().equals("pending") && stockCount.getRecountStatus().equals("pending")
				|| (stockCount.getStatus().equals("In Progress") && stockCount.getRecountStatus().equals("pending")))) {

			int totalCountedQty = ScUpdateCombinedDto.getItems().stream().map(item -> {
				StockCountCreationProducts product = creationProductsRepo.findByStockcountAndSku(stockCount,
						item.getSku());
				int varianceQty = product.getBookQty() - item.getQty();
				product.setCountedQty(item.getQty());
				product.setVarianceQty(varianceQty);
				creationProductsRepo.save(product);
				return item.getQty();
			}).reduce(0, Integer::sum);

			stockCount.setStatus("complete");
			stockCount.setTotalCountedQty(totalCountedQty);
			stockCount.setTotalVarianceQty(totalCountedQty - stockCount.getTotalBookQty());
			creationRepo.save(stockCount);

		} else if ((stockCount.getStatus().equals("complete") && stockCount.getRecountStatus().equals("pending")
				|| (stockCount.getStatus().equals("In Progress")
						&& stockCount.getRecountStatus().equals("In Progress")))) {

			int totalRecountQty = ScUpdateCombinedDto.getItems().stream().map(item -> {
				StockCountCreationProducts Product = creationProductsRepo.findByStockcountAndSku(stockCount,
						item.getSku());

				int varianceQty = Product.getBookQty() - item.getQty();
				Product.setReCountQty(item.getQty());
				Product.setRecountVarianceQty(varianceQty);
				creationProductsRepo.save(Product);
				return item.getQty();
			}).reduce(0, Integer::sum);

			stockCount.setStatus("complete");
			stockCount.setRecountStatus("complete");
			stockCount.setTotalRecountQty(totalRecountQty);
			stockCount.setTotalRecountVarianceQty(totalRecountQty - stockCount.getTotalBookQty());
			creationRepo.save(stockCount);

		}

		return "Quantity updated Successfully";

	}

	// Function to get all reason codes
	@Override
	public List<String> getScReasonCodes() {
		List<StockCountReasonCodes> reasonCodes = scReasonCodesRepo.findAll();
		List<String> reasonCodesList = new ArrayList<>();
		for (int i = 0; i < reasonCodes.size(); i++) {
			reasonCodesList.add(reasonCodes.get(i).getReasonCode());
		}
		return reasonCodesList;
	}

	// Function to create Adhoc Count
	@Override
	public StockCountCombinedDto createAdhocstockCount(String storeName, LocalDate startDate, LocalDate endDate) {

		Stores store = storeRepo.findByStoreName(storeName);
		if (store != null) {
			String adhocId = generateScAdhocIdString();
			StockCountCreation sc = new StockCountCreation();
			sc.setCountId(adhocId);
			sc.setCreationDate(LocalDate.now());
			sc.setStartDate(startDate);
			sc.setEndDate(endDate);
			sc.setStore(storeName);
			sc.setReason(null);
			sc.setStatus("New");
			sc.setRecountStatus("pending");
			sc.setTotalRecountVarianceQty(0);
			sc = creationRepo.save(sc);

			StockCountCombinedDto scDto = new StockCountCombinedDto(adhocId, sc.getStartDate(), sc.getEndDate(),
					sc.getCreationDate(), sc.getCategory(), sc.getTotalBookQty(), sc.getReason(), sc.getStatus(),
					sc.getTotalVarianceQty(), null);

			return scDto;
		} else {
			throw new ExceptionHandling(HttpStatus.NOT_FOUND, "Please add the appropriate store ");
		}

	}

	// Function to add Adhoc count products in stock count table
	@Transactional
	@Override
	public String saveAdhocProducts(StockCountAdhocCreationCombinedDto adhocDto) {

		StockCountCreation stockCount = creationRepo.findByCountId(adhocDto.getId());

		if ((stockCount.getStatus().equals("New") && stockCount.getRecountStatus().equals("pending"))
				|| (stockCount.getStatus().equals("In Progress") && stockCount.getRecountStatus().equals("pending"))) {

			stockCount.setCategory(adhocDto.getCategory());

			creationRepo.save(stockCount);

			int totalBookQty = 0;
			int totalCountedQty = 0;
			creationProductsRepo.deleteAllByStockcount(stockCount);
			Stores store1 = storeRepo.findByStoreName(stockCount.getStore());

			for (int i = 0; i < adhocDto.getItems().size(); i++) {
				StockCountCreationProducts ScProducts = new StockCountCreationProducts();
				ProductDetails Product = productDetailsRepo.findBySkuAndStore(adhocDto.getItems().get(i).getSku(),
						store1);

				if (Product != null) {
					ScProducts.setSku(adhocDto.getItems().get(i).getSku());
					ScProducts.setUpc(adhocDto.getItems().get(i).getUpc());
					ScProducts.setBookQty(Product.getSellableStock());
					ScProducts.setCountedQty(adhocDto.getItems().get(i).getQty());
					ScProducts.setVarianceQty(Product.getSellableStock() - adhocDto.getItems().get(i).getQty());
					ScProducts.setStockcount(stockCount);

					totalBookQty = totalBookQty + Product.getSellableStock();
					totalCountedQty = totalCountedQty + adhocDto.getItems().get(i).getQty();
					creationProductsRepo.save(ScProducts);
				} else {
					throw new ExceptionHandling(HttpStatus.NOT_FOUND, "Incorrect sku found ");
				}
			}

			stockCount.setTotalBookQty(totalBookQty);
			stockCount.setTotalCountedQty(totalCountedQty);
			stockCount.setStatus("complete");
			stockCount.setTotalVarianceQty(totalCountedQty - totalBookQty);
			creationRepo.save(stockCount);
			return "Adhoc Products saved successfully";
		} else {

			int totalRecountQty = 0;
			for (int i = 0; i < adhocDto.getItems().size(); i++) {

				StockCountCreationProducts Product = creationProductsRepo.findByStockcountAndSku(stockCount,
						adhocDto.getItems().get(i).getSku());

				if (Product != null) {

					Product.setReCountQty(adhocDto.getItems().get(i).getQty());
					Product.setRecountVarianceQty(Product.getBookQty() - adhocDto.getItems().get(i).getQty());

					totalRecountQty = totalRecountQty + adhocDto.getItems().get(i).getQty();
					creationProductsRepo.save(Product);
				} else {
					throw new ExceptionHandling(HttpStatus.NOT_FOUND, "Incorrect sku found ");
				}
			}

			stockCount.setTotalRecountQty(totalRecountQty);
			stockCount.setRecountStatus("complete");
			stockCount.setStatus("complete");
			stockCount.setTotalRecountVarianceQty(totalRecountQty - stockCount.getTotalBookQty());
			creationRepo.save(stockCount);

			return "Adhoc Products saved successfully";
		}
	}

	@Override
	public List<SCLandingDto> sortStockCountsByLatest() {

		List<StockCountCreation> stockCounts = creationRepo.findAllByOrderByStartDateDesc();

		List<SCLandingDto> stockCountsDto = new ArrayList<>();
		for (int i = 0; i < stockCounts.size(); i++) {

			stockCountsDto.add(new SCLandingDto(stockCounts.get(i).getCountId(), stockCounts.get(i).getCreationDate(),
					stockCounts.get(i).getStatus(), stockCounts.get(i).getTotalBookQty(),
					stockCounts.get(i).getReason(), "SC"));
		}
		return stockCountsDto;
	}

	@Override
	public List<SCLandingDto> sortStockCountsByOldest() {

		List<StockCountCreation> stockCounts = creationRepo.findAllByOrderByStartDateAsc();

		List<SCLandingDto> stockCountsDto = new ArrayList<>();
		for (int i = 0; i < stockCounts.size(); i++) {

			stockCountsDto.add(new SCLandingDto(stockCounts.get(i).getCountId(), stockCounts.get(i).getCreationDate(),
					stockCounts.get(i).getStatus(), stockCounts.get(i).getTotalBookQty(),
					stockCounts.get(i).getReason(), "SC"));
		}
		return stockCountsDto;
	}

	@Override
	public List<SCLandingDto> filterStockCountsByReasonOrStatus(String param) {

		List<StockCountCreation> stockCounts = creationRepo.findByReasonOrStatus(param, param);

		List<SCLandingDto> stockCountsDto = new ArrayList<>();
		for (int i = 0; i < stockCounts.size(); i++) {

			stockCountsDto.add(new SCLandingDto(stockCounts.get(i).getCountId(), stockCounts.get(i).getCreationDate(),
					stockCounts.get(i).getStatus(), stockCounts.get(i).getTotalBookQty(),
					stockCounts.get(i).getReason(), "SC"));
		}
		return stockCountsDto;
	}

	@Override
	public List<SCLandingDto> getMatchedStockCounts(String countId) {

		List<StockCountCreation> stockCounts = creationRepo.findByCountIdContaining(countId);

		List<SCLandingDto> stockCountsDto = new ArrayList<>();
		for (int i = 0; i < stockCounts.size(); i++) {

			stockCountsDto.add(new SCLandingDto(stockCounts.get(i).getCountId(), stockCounts.get(i).getCreationDate(),
					stockCounts.get(i).getStatus(), stockCounts.get(i).getTotalBookQty(),
					stockCounts.get(i).getReason(), "SC"));
		}
		return stockCountsDto;
	}

	@Override
	public String draftStockCount(StockCountAdhocCreationCombinedDto ScUpdateCombinedDto, String countType) {

		System.out.println("ScUpdateCombinedDto : " + ScUpdateCombinedDto);
		if (countType.equals("system")) {
			StockCountCreation stockCount = creationRepo.findByCountId(ScUpdateCombinedDto.getId());

			if ((stockCount.getStatus().equals("pending") && stockCount.getRecountStatus().equals("pending"))
					|| (stockCount.getStatus().equals("In Progress")
							&& stockCount.getRecountStatus().equals("pending"))) {

				creationProductsRepo.deleteAllByStockcount(stockCount);
				Stores store1 = storeRepo.findByStoreName(stockCount.getStore());

				for (int i = 0; i < ScUpdateCombinedDto.getItems().size(); i++) {
					StockCountCreationProducts ScProducts = new StockCountCreationProducts();
					ProductDetails Product = productDetailsRepo
							.findBySkuAndStore(ScUpdateCombinedDto.getItems().get(i).getSku(), store1);

					if (Product != null) {
						ScProducts.setSku(ScUpdateCombinedDto.getItems().get(i).getSku());
						ScProducts.setUpc(ScUpdateCombinedDto.getItems().get(i).getUpc());
						ScProducts.setCountedQty(ScUpdateCombinedDto.getItems().get(i).getQty());
						ScProducts.setBookQty(Product.getSellableStock());
						ScProducts.setStockcount(stockCount);

						creationProductsRepo.save(ScProducts);
					} else {
						throw new ExceptionHandling(HttpStatus.NOT_FOUND, "Incorrect sku found ");
					}
				}

				stockCount.setStatus("In Progress");
				creationRepo.save(stockCount);

			} else if ((stockCount.getStatus().equals("complete") && stockCount.getRecountStatus().equals("pending"))
					|| (stockCount.getStatus().equals("In Progress")
							&& stockCount.getRecountStatus().equals("In Progress"))) {

				ScUpdateCombinedDto.getItems().stream().map(item -> {
					StockCountCreationProducts Product = creationProductsRepo.findByStockcountAndSku(stockCount,
							item.getSku());

					Product.setReCountQty(item.getQty());
					creationProductsRepo.save(Product);
					return item.getQty();
				}).collect(Collectors.toList());

				stockCount.setStatus("In Progress");
				stockCount.setRecountStatus("In Progress");
				creationRepo.save(stockCount);

			}

			return "Quantity updated Successfully";

		} else if (countType.equals("adhoc")) {

			StockCountCreation stockCount = creationRepo.findByCountId(ScUpdateCombinedDto.getId());
			Stores store1 = storeRepo.findByStoreName(stockCount.getStore());

			if (stockCount.getStatus().equals("New") && stockCount.getRecountStatus().equals("pending")) {
				stockCount.setReason(ScUpdateCombinedDto.getReason());
				stockCount.setCategory(ScUpdateCombinedDto.getCategory());

				creationRepo.save(stockCount);

				System.out.println("case 1");
				int totalBookQty = 0;
				int totalCountedQty = 0;

				for (int i = 0; i < ScUpdateCombinedDto.getItems().size(); i++) {
					StockCountCreationProducts ScProducts = new StockCountCreationProducts();
					ProductDetails Product = productDetailsRepo
							.findBySkuAndStore(ScUpdateCombinedDto.getItems().get(i).getSku(), store1);

					if (Product != null) {
						ScProducts.setSku(ScUpdateCombinedDto.getItems().get(i).getSku());
						ScProducts.setUpc(ScUpdateCombinedDto.getItems().get(i).getUpc());
						ScProducts.setBookQty(Product.getSellableStock());
						ScProducts.setCountedQty(ScUpdateCombinedDto.getItems().get(i).getQty());
						// ScProducts.setVarianceQty(Product.getSellableStock() -
						// adhocDto.getItems().get(i).getQty());
						ScProducts.setStockcount(stockCount);

						totalBookQty = totalBookQty + Product.getSellableStock();
						totalCountedQty = totalCountedQty + ScUpdateCombinedDto.getItems().get(i).getQty();
						creationProductsRepo.save(ScProducts);
					} else {
						throw new ExceptionHandling(HttpStatus.NOT_FOUND, "Incorrect sku found ");
					}
				}

				stockCount.setTotalBookQty(totalBookQty);
				stockCount.setTotalCountedQty(totalCountedQty);
				stockCount.setStatus("In Progress");
				// stockCount.setTotalVarianceQty(totalBookQty - totalCountedQty);
				creationRepo.save(stockCount);
				return "Adhoc Draft saved successfully";

			} else if (stockCount.getStatus().equals("In Progress")
					&& stockCount.getRecountStatus().equals("pending")) {

				System.out.println("case 2");
				int totalBookQty = 0;
				int totalCountedQty = 0;
				creationProductsRepo.deleteAllByStockcount(stockCount);
				for (int i = 0; i < ScUpdateCombinedDto.getItems().size(); i++) {
					StockCountCreationProducts ScProducts = new StockCountCreationProducts();
					ProductDetails Product = productDetailsRepo
							.findBySkuAndStore(ScUpdateCombinedDto.getItems().get(i).getSku(), store1);

					if (Product != null) {
						ScProducts.setSku(ScUpdateCombinedDto.getItems().get(i).getSku());
						ScProducts.setUpc(ScUpdateCombinedDto.getItems().get(i).getUpc());
						ScProducts.setBookQty(Product.getSellableStock());
						ScProducts.setCountedQty(ScUpdateCombinedDto.getItems().get(i).getQty());
						// ScProducts.setVarianceQty(Product.getSellableStock() -
						// adhocDto.getItems().get(i).getQty());
						ScProducts.setStockcount(stockCount);

						totalBookQty = totalBookQty + Product.getSellableStock();
						totalCountedQty = totalCountedQty + ScUpdateCombinedDto.getItems().get(i).getQty();
						creationProductsRepo.save(ScProducts);
					} else {
						throw new ExceptionHandling(HttpStatus.NOT_FOUND, "Incorrect sku found ");
					}
				}
				stockCount.setTotalBookQty(totalBookQty);
				stockCount.setTotalCountedQty(totalCountedQty);
				creationRepo.save(stockCount);

			}

			else if ((stockCount.getStatus().equals("complete") && stockCount.getRecountStatus().equals("pending")
					|| (stockCount.getStatus().equals("In Progress")
							&& stockCount.getRecountStatus().equals("In Progress")))) {

				System.out.println("case 3");
				int totalRecountQty = 0;

				for (int i = 0; i < ScUpdateCombinedDto.getItems().size(); i++) {

					System.out.println("sku :" + ScUpdateCombinedDto.getItems().get(i).getSku());
					StockCountCreationProducts Product = creationProductsRepo.findByStockcountAndSku(stockCount,
							ScUpdateCombinedDto.getItems().get(i).getSku());

					if (Product != null) {

						Product.setReCountQty(ScUpdateCombinedDto.getItems().get(i).getQty());
						Product.setRecountVarianceQty(
								Product.getBookQty() - ScUpdateCombinedDto.getItems().get(i).getQty());

						totalRecountQty = totalRecountQty + ScUpdateCombinedDto.getItems().get(i).getQty();
						creationProductsRepo.save(Product);
					} else {
						throw new ExceptionHandling(HttpStatus.NOT_FOUND, "Incorrect sku found ");
					}
				}

				stockCount.setTotalRecountQty(totalRecountQty);
				stockCount.setRecountStatus("In Progress");
				stockCount.setStatus("In Progress");
				stockCount.setTotalRecountVarianceQty(stockCount.getTotalBookQty() - totalRecountQty);
				creationRepo.save(stockCount);

			}
			return "Quantity updated Successfully";
		}
		return null;

	}

	// Function to generate Id's
	public String generateScIdString() {
		final String CHARACTERS = "0123456789";
		final SecureRandom random = new SecureRandom();
		StringBuilder sb = new StringBuilder(10);
		sb.append("SC");
		for (int i = 0; i < 12; i++) {
			sb.append(CHARACTERS.charAt(random.nextInt(CHARACTERS.length())));

		}
		return sb.toString();
	}

	public String generateScAdhocIdString() {
		final String CHARACTERS = "0123456789";
		final SecureRandom random = new SecureRandom();
		StringBuilder sb = new StringBuilder(5);
		sb.append("ADHOC");
		for (int i = 0; i < 7; i++) {
			sb.append(CHARACTERS.charAt(random.nextInt(CHARACTERS.length())));

		}
		return sb.toString();
	}
}
