package com.inventory.myserviceimpl;

import java.util.HashMap;

import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.inventory.myentity.AdhocStockCount;
import com.inventory.myentity.ProductDetails;
import com.inventory.myentity.PurchaseOrder;
import com.inventory.myentity.PurchaseOrderItems;
import com.inventory.myentity.SaveStockCountInfo;
import com.inventory.myentity.SaveStockCountProducts;
import com.inventory.myentity.Stores;
import com.inventory.myentity.TsfHead;
import com.inventory.myrepository.AdhocStockCountRepo;
import com.inventory.myrepository.ProductDetailsRepo;
import com.inventory.myrepository.ProductRepo;
import com.inventory.myrepository.PurchaseOrderItemsRepo;
import com.inventory.myrepository.PurchaseOrderRepo;
import com.inventory.myrepository.SaveStockInfoRepo;
import com.inventory.myrepository.SaveStockProductsRepo;
import com.inventory.myrepository.StoreRepo;
import com.inventory.myrepository.TsfHeadRepo;
import com.inventory.myservice.DashboardService;

import java.time.LocalDate;
import java.time.format.DateTimeFormatter;

@Service
public class DashboardServiceImpl implements DashboardService {

	@Autowired
	private StoreRepo storeRepo;

	@Autowired
	private ProductDetailsRepo productDetailsRepo;

	@Autowired
	private ProductRepo productRepo;

	@Autowired
	private TsfHeadRepo tsfHeadRepo;

	@Autowired
	private SaveStockInfoRepo saveStockInfoRepo;

	@Autowired
	private SaveStockProductsRepo saveStockProductsRepo;

	@Autowired
	private AdhocStockCountRepo adhocStockCountRepo;

	@Autowired
	private PurchaseOrderItemsRepo itemsRepo;

	@Autowired
	private PurchaseOrderRepo purchaseOrderRepo;

	@Override
	public HashMap<String, Integer> getInTransfers(String store) {

		int newRequest = 0;
		int accepted = 0;
		int shipped = 0;
		int delivered = 0;
		List<TsfHead> tsfList = tsfHeadRepo.findAllByStoreTo(store);

		for (int i = 0; i < tsfList.size(); i++) {
			String status = tsfList.get(i).getStatus();

			if (status.equals("New Request")) {
				newRequest = newRequest + 1;
			} else if (status.equals("Accepted")) {
				accepted = accepted + 1;
			} else if (status.equals("Shipped")) {
				shipped = shipped + 1;
			} else if (status.equals("Delivered")) {
				delivered = delivered + 1;
			}

		}
		HashMap<String, Integer> hashMap = new HashMap<>();

		hashMap.put(" newRequest", newRequest);
		hashMap.put("accepted", accepted);
		hashMap.put("shipped", shipped);
		hashMap.put("delivered", delivered);
		return hashMap;
	}

	@Override
	public HashMap<String, Integer> getOutTransfers(String store) {

		int newRequest = 0;
		int accepted = 0;
		int shipped = 0;
		int delivered = 0;
		List<TsfHead> tsfList = tsfHeadRepo.findAllByStoreFrom(store);

		for (int i = 0; i < tsfList.size(); i++) {
			String status = tsfList.get(i).getStatus();

			if (status.equals("New Request")) {
				newRequest = newRequest + 1;
			} else if (status.equals("Accepted")) {
				accepted = accepted + 1;
			} else if (status.equals("Shipped")) {
				shipped = shipped + 1;
			} else if (status.equals("Delivered")) {
				delivered = delivered + 1;
			}

		}

		HashMap<String, Integer> hashMap = new HashMap<>();

		hashMap.put(" newRequest", newRequest);
		hashMap.put("accepted", accepted);
		hashMap.put("shipped", shipped);
		hashMap.put("delivered", delivered);
		return hashMap;
	}

	@Override
	public HashMap<String, Integer> getCategoryWiseVariance() {

		int sportsWearBookQty = 0;
		int sportsWearCountedQty = 0;
		int WomenwearbookQty = 0;
		int WomenwearCountedQty = 0;
		int FootwearbookQty = 0;
		int FootwearCountedQty = 0;
		int HandbagsbookQty = 0;
		int HandbagsCountedQty = 0;

		DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd-MM-yyyy");
		LocalDate currentDateInLocalDate = LocalDate.now();// .format(formatter);
		LocalDate pastDateInLocalDate = currentDateInLocalDate.minusMonths(1);

		String currentDate = currentDateInLocalDate.format(formatter);
		String pastDate = pastDateInLocalDate.format(formatter);

		List<SaveStockCountInfo> info = saveStockInfoRepo.findByDateRange(pastDate, currentDate);

//		System.out.println("currentDate : " + currentDate);
//		System.out.println("pastDate : " + pastDate);
		System.out.println("info : " + info);

		for (int i = 0; i < info.size(); i++) {

			List<SaveStockCountProducts> product = saveStockProductsRepo.findByStockcount(info.get(i));

			for (int j = 0; j < product.size(); j++) {
				if (product.get(i).getCategory().equals("Sportswear")) {

					sportsWearBookQty = sportsWearBookQty + product.get(j).getBookQty();
					sportsWearCountedQty = sportsWearCountedQty + product.get(j).getCountedQty();
				} else if (product.get(i).getCategory().equals("Womenwear")) {

					WomenwearbookQty = WomenwearbookQty + product.get(j).getBookQty();
					WomenwearCountedQty = WomenwearCountedQty + product.get(j).getCountedQty();
				} else if (product.get(i).getCategory().equals("Footwear")) {

					FootwearbookQty = FootwearbookQty + product.get(j).getBookQty();
					FootwearCountedQty = FootwearCountedQty + product.get(j).getCountedQty();
				} else if (product.get(i).getCategory().equals("Handbags")) {

					HandbagsbookQty = HandbagsbookQty + product.get(j).getBookQty();
					HandbagsCountedQty = HandbagsCountedQty + product.get(j).getCountedQty();
				}

			}
		}

		List<AdhocStockCount> products = adhocStockCountRepo.findByDateRange(pastDate, currentDate);

		for (int i = 0; i < products.size(); i++) {
			if (products.get(i).getCategory().equals("Sportswear")) {

				sportsWearBookQty = sportsWearBookQty + products.get(i).getBookQty();
				sportsWearCountedQty = sportsWearCountedQty + products.get(i).getFirstcountedQty();
			} else if (products.get(i).getCategory().equals("Womenwear")) {

				WomenwearbookQty = WomenwearbookQty + products.get(i).getBookQty();
				WomenwearCountedQty = WomenwearCountedQty + products.get(i).getFirstcountedQty();
			} else if (products.get(i).getCategory().equals("Footwear")) {

				FootwearbookQty = FootwearbookQty + products.get(i).getBookQty();
				FootwearCountedQty = FootwearCountedQty + products.get(i).getFirstcountedQty();
			} else if (products.get(i).getCategory().equals("Handbags")) {

				HandbagsbookQty = HandbagsbookQty + products.get(i).getBookQty();
				HandbagsCountedQty = HandbagsCountedQty + products.get(i).getFirstcountedQty();
			}

		}

		HashMap<String, Integer> hashMap = new HashMap<>();

		hashMap.put(" sportsWearBookQty", sportsWearBookQty);
		hashMap.put("sportsWearCountedQty", sportsWearCountedQty);
		hashMap.put("WomenwearbookQty", WomenwearbookQty);
		hashMap.put("WomenwearCountedQty", WomenwearCountedQty);
		hashMap.put("FootwearbookQty", FootwearbookQty);
		hashMap.put("FootwearCountedQty", FootwearCountedQty);
		hashMap.put("HandbagsbookQty", HandbagsbookQty);
		hashMap.put("HandbagsCountedQty", HandbagsCountedQty);

		System.out.println("sportsWearBookQty : " + sportsWearBookQty);
		System.out.println("sportsWearCountedQty : " + sportsWearCountedQty);

		return hashMap;

	}

	@Override
	public HashMap<String, Integer> getInventoryDiscrepancyRatio(String store) {

		int stockOk = 0;
		int excess = 0;
		int shortQty = 0;
		int damaged = 0;

		DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd-MM-yyyy");
		LocalDate currentDateInLocalDate = LocalDate.now();// .format(formatter);
		LocalDate pastDateInLocalDate = currentDateInLocalDate.minusMonths(1);

		String currentDate = currentDateInLocalDate.format(formatter);
		String pastDate = pastDateInLocalDate.format(formatter);

		List<PurchaseOrder> PO = purchaseOrderRepo.findByDateRange(currentDate, pastDate);

		for (int i = 0; i < PO.size(); i++) {

			List<PurchaseOrderItems> products = itemsRepo.findAllByPurchaseOrder(PO.get(i));

			for (int j = 0; j < products.size(); j++) {
				if (products.get(j).getReceivedQty() > products.get(j).getExpectedQty()) {
					excess = excess + (products.get(j).getExpectedQty() - products.get(j).getReceivedQty());

				}
				if (products.get(j).getReceivedQty() < products.get(j).getExpectedQty()) {
					shortQty = shortQty + (products.get(j).getExpectedQty() - products.get(j).getReceivedQty());

				}
				if (products.get(j).getDamageQty() != 0) {
					damaged = damaged + products.get(j).getDamageQty();
				}
				stockOk = stockOk + (products.get(j).getReceivedQty() - products.get(j).getDamageQty());
			}
		}

		HashMap<String, Integer> hashMap = new HashMap<>();

		hashMap.put("stockOk", stockOk);
		hashMap.put("excess", excess);
		hashMap.put("shortQty", shortQty);
		hashMap.put("damaged", damaged);
		return hashMap;
	}

	// My tasks API's

	@Override
	public HashMap<String, Integer> getStockInHand(String storeName) {

		int sellableStock = 0;
		int NonsellableStock = 0;

		Stores store = storeRepo.findByStoreName(storeName);
		List<ProductDetails> items = productDetailsRepo.findAllByStore(store);

		for (int i = 0; i < items.size(); i++) {
			sellableStock = sellableStock + items.get(i).getSellableStock();
			NonsellableStock = NonsellableStock + items.get(i).getNonSellableStock();
		}
		
		HashMap<String, Integer> hashMap = new HashMap<>();

		hashMap.put("sellableStock", sellableStock);
		hashMap.put("NonsellableStock", NonsellableStock);
		
		return hashMap;

	}
	
	@Override
	public HashMap<String, Integer> getStockInHand(String storeName) {

		int sellableStock = 0;
		int NonsellableStock = 0;

		Stores store = storeRepo.findByStoreName(storeName);
		List<ProductDetails> items = productDetailsRepo.findAllByStore(store);

		for (int i = 0; i < items.size(); i++) {
			sellableStock = sellableStock + items.get(i).getSellableStock();
			NonsellableStock = NonsellableStock + items.get(i).getNonSellableStock();
		}
		
		HashMap<String, Integer> hashMap = new HashMap<>();

		hashMap.put("sellableStock", sellableStock);
		hashMap.put("NonsellableStock", NonsellableStock);
		
		return hashMap;

	}

}
