package com.inventory.myserviceimpl;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.inventory.mydto.TSFCombinedDto;
import com.inventory.mydto.TsfDetailsDto;
import com.inventory.myentity.TsfDetails;
import com.inventory.myentity.TsfHead;
import com.inventory.myentity.TsfReasonCodes;
import com.inventory.myrepository.ProductDetailsRepo;
import com.inventory.myrepository.ProductRepo;
import com.inventory.myrepository.StoreRepo;
import com.inventory.myrepository.TsfDetailsRepo;
import com.inventory.myrepository.TsfHeadRepo;
import com.inventory.myrepository.TsfReasonCodesRepo;
import com.inventory.myservice.TransferReceiveService;

@Service
public class TransferReceiveServiceImpl implements TransferReceiveService {

	@Autowired
	private TsfHeadRepo tsfHeadRepo;

	@Autowired
	private StoreRepo storeRepo;

	@Autowired
	private TsfDetailsRepo tsfDetailsRepo;

	@Autowired
	private TsfReasonCodesRepo tsfReasonCodesRepo;

	@Autowired
	private ProductRepo productRepo;

	@Autowired
	private ProductDetailsRepo productDetailsRepo;

	// function to get All TSF Reason Codes
	@Override
	public List<TsfReasonCodes> getTsfReasonCodes() {
		List<TsfReasonCodes> tsfReasonCodes = tsfReasonCodesRepo.findAll();
		return tsfReasonCodes;
	}

	// Function to create Transfer
	@Override
	public String createTansfer(TSFCombinedDto tsfCombinedDto, String tsfID) {

		TsfHead tsf = new TsfHead(tsfID, tsfCombinedDto.getTsfHeadDto().getStoreFrom(),
				tsfCombinedDto.getTsfHeadDto().getStoreTo(), tsfCombinedDto.getTsfHeadDto().getReasonCode(),
				tsfCombinedDto.getTsfHeadDto().getStatus(), tsfCombinedDto.getTsfHeadDto().getAttachedProof(),
				tsfCombinedDto.getTsfHeadDto().getTotalReqQty(), tsfCombinedDto.getTsfHeadDto().getCreationDate(), null,
				tsfCombinedDto.getTsfHeadDto().getNotAfter(), tsfCombinedDto.getTsfHeadDto().getNotBefore(), null,
				null);

		tsf = tsfHeadRepo.save(tsf);

		List<TsfDetails> tsfProducts = new ArrayList<>();
		for (int i = 0; i < tsfCombinedDto.getTsfDetailsDto().size(); i++) {
			tsfProducts.add(new TsfDetails(tsfCombinedDto.getTsfDetailsDto().get(i).getItemNumber(),
					tsfCombinedDto.getTsfDetailsDto().get(i).getItemName(),
					tsfCombinedDto.getTsfDetailsDto().get(i).getCategory(),
					tsfCombinedDto.getTsfDetailsDto().get(i).getColor(),
					tsfCombinedDto.getTsfDetailsDto().get(i).getPrice(),
					tsfCombinedDto.getTsfDetailsDto().get(i).getSize(),
					tsfCombinedDto.getTsfDetailsDto().get(i).getRequestedQty(), 0, 0, 0, 0, null,
					tsfCombinedDto.getTsfDetailsDto().get(i).getImageData(),
					tsfCombinedDto.getTsfDetailsDto().get(i).getUpc(),
					tsfCombinedDto.getTsfDetailsDto().get(i).getSku(),
					tsfCombinedDto.getTsfDetailsDto().get(i).getTaxPercentage(),
					tsfCombinedDto.getTsfDetailsDto().get(i).getTaxCode(), tsf));
		}

		tsfDetailsRepo.saveAll(tsfProducts);
		return "Transfer created successfully";
	}

	@Override
	public String generateTsfId() {
		final String CHARACTERS = "0123456789";
		final SecureRandom random = new SecureRandom();
		StringBuilder sb = new StringBuilder(10);
		sb.append("TSF");
		for (int i = 0; i < 12; i++) {
			sb.append(CHARACTERS.charAt(random.nextInt(CHARACTERS.length())));

		}
		return sb.toString();
	}

	// function to get IN Transfers
	@Override
	public List<TsfHead> getInTransfers(String store) {
		List<TsfHead> inTransfers = tsfHeadRepo.findAllByStoreTo(store);
		return inTransfers;
	}

	// function to get OUT Transfers
	@Override
	public List<TsfHead> getOutTransfers(String store) {
		List<TsfHead> outTransfers = tsfHeadRepo.findAllByStoreFrom(store);
		// System.out.println("outTransfers -- " + outTransfers);
		return outTransfers;
	}

	// Function to get TSF products by TSF Id -- Order Fulfillment
	@Override
	public List<TsfDetails> getTsfProductsById(String TsfId) {
		TsfHead tsf = tsfHeadRepo.findByTsfId(TsfId);
		List<TsfDetails> tsfProds = tsfDetailsRepo.findByTsfHead(tsf);
		TsfDetailsDto tsfDetailsDto= new ArrayList<>();
		return tsfProds;

	}
}
