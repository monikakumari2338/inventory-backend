package com.inventory.myserviceimpl;

import java.util.ArrayList;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Service;

import com.inventory.mydto.DsdDto;
import com.inventory.mydto.InventoryAdjustmentCombinedDto;
import com.inventory.mydto.RtvCombinedDto;
import com.inventory.mydto.RtvInfoDto;
import com.inventory.mydto.TsfHeadDtoToGetTransfers;
import com.inventory.myentity.DSD;
import com.inventory.myentity.InventoryAdjustment;
import com.inventory.myentity.InventoryAdjustmentProducts;
import com.inventory.myentity.ProductDetails;
import com.inventory.myentity.RTVInfo;
import com.inventory.myentity.RTVProducts;
import com.inventory.myentity.RtvReasonCodes;
import com.inventory.myentity.Stores;
import com.inventory.myentity.Suppliers;
import com.inventory.myexception.ExceptionHandling;
import com.inventory.myrepository.ReturnTovendorInfoRepo;
import com.inventory.myrepository.ReturnTovendorProductsRepo;
import com.inventory.myrepository.RtvReasonCodesRepo;
import com.inventory.myrepository.StoreRepo;
import com.inventory.myrepository.SuppliersRepo;
import com.inventory.myservice.ReturnToVendorService;

import java.security.SecureRandom;
import java.time.LocalDate;

@Service
public class ReturnToVendorServiceImpl implements ReturnToVendorService {

	@Autowired
	private ReturnTovendorInfoRepo rtvInfoRepo;

	@Autowired
	private ReturnTovendorProductsRepo rtvProductsRepo;

	@Autowired
	private RtvReasonCodesRepo rtvReasonCodesRepo;

	@Autowired
	private SuppliersRepo suppliersRepo;

	@Autowired
	private StoreRepo storeRepo;

	@Override
	public RtvInfoDto createRTV(String storeName, String user) {

		Stores store = storeRepo.findByStoreName(storeName);
		if (store != null) {
			String rtvId = generateRtvIdString();
			LocalDate date = LocalDate.now();
			RTVInfo rtvInfo = new RTVInfo();

			rtvInfo.setRtvID(rtvId);
			rtvInfo.setStoreId(store.getStoreId());
			rtvInfo.setCreatedBy(user);
			rtvInfo.setCreationDate(date);
			rtvInfo.setStatus("In Progress");
			rtvInfo = rtvInfoRepo.save(rtvInfo);

			RtvInfoDto rtvInfoDto = new RtvInfoDto(rtvInfo.getRtvID(), rtvInfo.getCreationDate(), storeName,
					rtvInfo.getCreatedBy(), "RTV");
			return rtvInfoDto;
		} else {
			throw new ExceptionHandling(HttpStatus.NOT_FOUND, "Please add the appropriate store ");
		}

	}

	@Override
	public String saveRtvProducts(RtvCombinedDto rtvCombinedDto) {

		RTVInfo rtv = rtvInfoRepo.findByrtvID(rtvCombinedDto.getId());
		Suppliers supplier = suppliersRepo.findBySupplierId(rtvCombinedDto.getSupplierId());
		LocalDate date = LocalDate.now();

		rtv.setSupplierId(rtvCombinedDto.getSupplierId());
		rtv.setSupplierName(supplier.getSupplierName());
		rtv.setTotalSku(rtvCombinedDto.getItems().size());
		rtv.setTotalItems(0);
		rtv.setStatus("Dispatched");
		rtv.setDefaultReasonCode(rtvCombinedDto.getReason());
		rtv.setDispatchedUser(rtvCombinedDto.getDispatchedUser());
		rtv.setDispatchedDate(date);
		rtv.setProof(rtvCombinedDto.getImage());

		List<InventoryAdjustmentProducts> adj = invAdjProductsRepo.findByInvAdjustment(inventoryAdjustment);
		if (adj.isEmpty()) {

			InventoryAdjustmentProducts inventoryAdjustmentProduct = new InventoryAdjustmentProducts();
			for (int i = 0; i < InvAdjCombinedDto.getItems().size(); i++) {

				inventoryAdjustmentProduct = new InventoryAdjustmentProducts(
						InvAdjCombinedDto.getItems().get(i).getItemNumber(),
						InvAdjCombinedDto.getItems().get(i).getItemName(),
						InvAdjCombinedDto.getItems().get(i).getCategory(),
						InvAdjCombinedDto.getItems().get(i).getColor(), InvAdjCombinedDto.getItems().get(i).getSize(),
						InvAdjCombinedDto.getItems().get(i).getSku(), InvAdjCombinedDto.getItems().get(i).getUpc(),
						InvAdjCombinedDto.getItems().get(i).getQty(), InvAdjCombinedDto.getItems().get(i).getImage(),
						InvAdjCombinedDto.getItems().get(i).getImageData(), inventoryAdjustment);

				inventoryAdjustmentProduct = invAdjProductsRepo.save(inventoryAdjustmentProduct);

			}
		}

		else {

			invAdjProductsRepo.deleteAllByInvAdjustment(inventoryAdjustment);
			InventoryAdjustmentProducts inventoryAdjustmentProduct = new InventoryAdjustmentProducts();
			for (int i = 0; i < InvAdjCombinedDto.getItems().size(); i++) {

				inventoryAdjustmentProduct = new InventoryAdjustmentProducts(
						InvAdjCombinedDto.getItems().get(i).getItemNumber(),
						InvAdjCombinedDto.getItems().get(i).getItemName(),
						InvAdjCombinedDto.getItems().get(i).getCategory(),
						InvAdjCombinedDto.getItems().get(i).getColor(), InvAdjCombinedDto.getItems().get(i).getSize(),
						InvAdjCombinedDto.getItems().get(i).getSku(), InvAdjCombinedDto.getItems().get(i).getUpc(),
						InvAdjCombinedDto.getItems().get(i).getQty(), InvAdjCombinedDto.getItems().get(i).getImage(),
						InvAdjCombinedDto.getItems().get(i).getImageData(), inventoryAdjustment);

				inventoryAdjustmentProduct = invAdjProductsRepo.save(inventoryAdjustmentProduct);

			}

		}

		for (int i = 0; i < InvAdjCombinedDto.getItems().size(); i++) {

			String sku = InvAdjCombinedDto.getItems().get(i).getSku();
			Stores store = storeRepo.findByStoreName(inventoryAdjustment.getStore());
			ProductDetails product = productDetailsRepo.findBySkuAndStore(sku, store);

			if (product == null) {
				throw new ExceptionHandling(HttpStatus.NOT_FOUND, "Incorrect sku found ");
			} else if (product.getSku().equals(sku)) {

				if (InvAdjCombinedDto.getReason().equals("Damage")) {
					int totalStock = product.getTotalStock();
					int newStock = totalStock + InvAdjCombinedDto.getItems().get(i).getQty();
					int nonSellable = product.getNonSellableStock();
					int newNonSellable = nonSellable + InvAdjCombinedDto.getItems().get(i).getQty();
					product.setTotalStock(newStock);
					product.setNonSellableStock(newNonSellable);
					// System.out.println("damage");
					productDetailsRepo.save(product);
				}

				else if (InvAdjCombinedDto.getReason().equals("Stock In")) {
					int totalStock = product.getTotalStock();
					int newStock = totalStock + InvAdjCombinedDto.getItems().get(i).getQty();
					int sellable = product.getSellableStock();
					int newSellable = sellable + InvAdjCombinedDto.getItems().get(i).getQty();
					product.setTotalStock(newStock);
					product.setSellableStock(newSellable);
					productDetailsRepo.save(product);
					// System.out.println("stock in");
				}

				else {
					int totalStock = product.getTotalStock();
					int newStock = totalStock - InvAdjCombinedDto.getItems().get(i).getQty();
					int sellable = product.getSellableStock();
					int newSellable = sellable - InvAdjCombinedDto.getItems().get(i).getQty();
					product.setTotalStock(newStock);
					product.setSellableStock(newSellable);
					productDetailsRepo.save(product);
					System.out.println("theft");
				}
			}

		}

		inventoryAdjustment.setStatus(InvAdjCombinedDto.getStatus());
		inventoryAdjustment = invAdjRepo.save(inventoryAdjustment);
		// System.out.println("inventoryAdjustmentProduct : - " +
		// inventoryAdjustmentProduct);

		return "Products saved successfully";

	}

	// Function to get all RTV
//	@Override
//	public List<RtvInfoToGetAllRtv> getAllVendorReturn() {
//		List<RTVInfo> rtvInfo = rtvInfoRepo.findAll();
//
//		List<RtvInfoToGetAllRtv> rtvInfoDto = new ArrayList<>();
//		for (int i = 0; i < rtvInfo.size(); i++) {
//			rtvInfoDto.add(new RtvInfoToGetAllRtv(rtvInfo.get(i).getRtvID(), rtvInfo.get(i).getStatus(),
//					rtvInfo.get(i).getCreatedDate(), "RTV", rtvInfo.get(i).getTotalSku()));
//		}
//		return rtvInfoDto;
//	}
//
//	// Function to get RTV Products by Id
//	@Override
//	public List<RTVProducts> getRTVProductsbyId(String rtvId) {
//		RTVInfo rtv = rtvInfoRepo.findByrtvID(rtvId);
//		List<RTVProducts> RTVProcessInfo = rtvProductsRepo.findByrtvInfo(rtv);
//		return RTVProcessInfo;
//	}
//
//	@Override
//	public String dispatchRTV(String rtvId) {
//		RTVInfo rtv = rtvInfoRepo.findByrtvID(rtvId);
//		rtv.setStatus("Completed");
//		rtvInfoRepo.save(rtv);
//		return "Item Dispatched";
//	}
//
	@Override
	public List<RtvReasonCodes> getRtvReasonCodes() {
		List<RtvReasonCodes> rtvReasonCodes = rtvReasonCodesRepo.findAll();
		return rtvReasonCodes;
	}

//
//	@Override
//	public List<Suppliers> getAllSuppliers() {
//		List<Suppliers> suppliers = suppliersRepo.findAll();
//		return suppliers;
//	}
//
//	@Override
//	public List<Suppliers> getMatchedSuppliersBySupplierName(String name) {
//		List<Suppliers> suppliers = suppliersRepo.findBySupplierNameContaining(name);
//		return suppliers;
//	}
//
	public String generateRtvIdString() {
		final String CHARACTERS = "0123456789";
		final SecureRandom random = new SecureRandom();
		StringBuilder sb = new StringBuilder(10);
		sb.append("RTV");
		for (int i = 0; i < 12; i++) {
			sb.append(CHARACTERS.charAt(random.nextInt(CHARACTERS.length())));

		}
		return sb.toString();
	}
}
