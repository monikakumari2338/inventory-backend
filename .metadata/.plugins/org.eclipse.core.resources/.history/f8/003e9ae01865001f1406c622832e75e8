
package com.inventory.myserviceimpl;

import java.security.SecureRandom;
import java.time.LocalDate;

import java.util.ArrayList;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Service;

import com.inventory.mydto.DSDLandingDto;
import com.inventory.mydto.InventoryAdjustmentCombinedDto;
import com.inventory.mydto.InventoryAdjustmentProductsdto;
import com.inventory.mydto.StockCountCombinedDto;
import com.inventory.mydto.StockCountCreationDto;
import com.inventory.myentity.InventoryAdjustment;
import com.inventory.myentity.InventoryAdjustmentProducts;
import com.inventory.myentity.ProductDetails;
import com.inventory.myentity.StockCountCreation;
import com.inventory.myentity.StockCountCreationProducts;
import com.inventory.myentity.Stores;
import com.inventory.myexception.ExceptionHandling;
import com.inventory.myrepository.ProductDetailsRepo;
import com.inventory.myrepository.StockCreationProductsRepo;
import com.inventory.myrepository.StockCreationRepo;
import com.inventory.myrepository.StoreRepo;
import com.inventory.myservice.StockCountCreationService;

@Service
public class StockCountCreationServiceImpl implements StockCountCreationService {

	@Autowired
	private StockCreationRepo creationRepo;

	@Autowired
	private StockCreationProductsRepo creationProductsRepo;

	@Autowired
	private ProductDetailsRepo productDetailsRepo;

	@Autowired
	private StoreRepo storeRepo;

	// Function to create stock count
	@Override
	public String createStockCount(StockCountCreationDto creationDto) {

		int totalBookQty = 0;
		StockCountCreation ScCreation = new StockCountCreation(generateScIdString(), LocalDate.now(), null,
				creationDto.getReason(), "In Progress", creationDto.getStore(), creationDto.getCategory(), totalBookQty,
				0, 0, 0, null, 0);

		ScCreation = creationRepo.save(ScCreation);

		StockCountCreationProducts ScProducts = new StockCountCreationProducts();
		Stores store1 = storeRepo.findByStoreName(creationDto.getStore());

		for (int i = 0; i < creationDto.getCreationProductsDto().size(); i++) {

			ProductDetails Product = productDetailsRepo
					.findBySkuAndStore(creationDto.getCreationProductsDto().get(i).getSku(), store1);

			if (Product != null) {
				ScProducts.setSku(creationDto.getCreationProductsDto().get(i).getSku());
				ScProducts.setUpc(creationDto.getCreationProductsDto().get(i).getUpc());
				ScProducts.setBookQty(Product.getSellableStock());

				totalBookQty = totalBookQty + Product.getSellableStock();
				creationProductsRepo.save(ScProducts);
			} else {
				throw new ExceptionHandling(HttpStatus.NOT_FOUND, "Incorrect sku found ");
			}

		}
		ScCreation.setTotalBookQty(totalBookQty);
		return "Stock Count Created Successfully";

	}

	@Override
	public List<DSDLandingDto> getAllStockCount() {

		List<StockCountCreation> stockCounts = creationRepo.findAll();

		List<DSDLandingDto> stockCountsDto = new ArrayList<>();
		for (int i = 0; i < stockCounts.size(); i++) {

			stockCountsDto.add(new DSDLandingDto(stockCounts.get(i).getCountId(), stockCounts.get(i).getStartDate(),
					stockCounts.get(i).getStatus(), stockCounts.get(i).getTotalBookQty(), null, "SC"));
		}
		return stockCountsDto;
	}

	@Override
	public StockCountCombinedDto getStockCountProductsByCountId(String countId) {

		StockCountCreation stockCount = creationRepo.findByCountId(countId);
		List<StockCountCreationProducts> scProducts = creationProductsRepo.findByStockcount(stockCount);
		List<InventoryAdjustmentProductsdto> itemsDto = new ArrayList<>();

		Stores store = storeRepo.findByStoreName(stockCount.getStore());
		for (int i = 0; i < scProducts.size(); i++) {
			ProductDetails product = productDetailsRepo.findBySkuAndStore(scProducts.get(i).getSku(), store);
			itemsDto.add(new InventoryAdjustmentProductsdto(product.getProduct().getItemNumber(),
					product.getProduct().getitemName(), product.getProduct().getCategory().getCategory(),
					product.getColor(), product.getSize(), product.getSku(), product.getUpc(),
					product.getSellableStock(), null, product.getImageData(), "SC"));
		}

		InventoryAdjustmentCombinedDto invCombinedDto = new InventoryAdjustmentCombinedDto(countId, null,
				stockCount.getTotalBookQty(), stockCount.getReason(), stockCount.getStatus(), itemsDto);
		return invCombinedDto;

	}

	public String generateScIdString() {
		final String CHARACTERS = "0123456789";
		final SecureRandom random = new SecureRandom();
		StringBuilder sb = new StringBuilder(10);
		sb.append("IA");
		for (int i = 0; i < 12; i++) {
			sb.append(CHARACTERS.charAt(random.nextInt(CHARACTERS.length())));

		}
		return sb.toString();
	}
}
