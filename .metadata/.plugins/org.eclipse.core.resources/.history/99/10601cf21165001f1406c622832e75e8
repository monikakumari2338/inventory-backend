
package com.inventory.myserviceimpl;

import java.time.LocalDate;

import java.util.ArrayList;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Service;

import com.inventory.mydto.DsdDto;
import com.inventory.mydto.StockCountCreationDto;
import com.inventory.mydto.TSFCombinedDto;
import com.inventory.myentity.Category;
import com.inventory.myentity.ProductDetails;
import com.inventory.myentity.StockCountCreation;
import com.inventory.myentity.StockCountCreationProducts;
import com.inventory.myentity.Stores;
import com.inventory.myentity.TsfDetails;
import com.inventory.myentity.TsfHead;
import com.inventory.myexception.ExceptionHandling;
import com.inventory.myrepository.CategoryRepo;
import com.inventory.myrepository.StockCreationProductsRepo;
import com.inventory.myrepository.StockCreationRepo;
import com.inventory.myservice.StockCountCreationService;

import jakarta.transaction.Transactional;

@Service
public class StockCountCreationServiceImpl implements StockCountCreationService {

	@Autowired
	private StockCreationRepo creationRepo;

	@Autowired
	private StockCreationProductsRepo creationProductsRepo;

	@Autowired
	private CategoryRepo categoryRepo;

	// Function to create stock count
	@Override
	public String createStockCount(StockCountCreationDto creationDto) {

		List<TsfDetails> tsfProducts = new ArrayList<>();

		Stores store = storeRepo.findByStoreName(tsf.getStoreFrom());

		for (int i = 0; i < tsfCombinedDto.getTsfDetailsDto().size(); i++) {
			ProductDetails product = productDetailsRepo
					.findBySkuAndStore(tsfCombinedDto.getTsfDetailsDto().get(i).getSku(), store);

			if (product != null && product.getSellableStock() >= tsfCombinedDto.getTsfDetailsDto().get(i).getQty()) {
				tsfProducts.add(new TsfDetails(tsfCombinedDto.getTsfDetailsDto().get(i).getQty(), 0, 0, 0, 0, null,
						tsfCombinedDto.getTsfDetailsDto().get(i).getUpc(),
						tsfCombinedDto.getTsfDetailsDto().get(i).getSku(), tsf));

				requestedQty = requestedQty + tsfCombinedDto.getTsfDetailsDto().get(i).getQty();
			} else {
				throw new RuntimeException("Expected qty can't exceed available store qty!");
			}

			tsf.setTotalReqQty(requestedQty);
			tsf = tsfHeadRepo.save(tsf);

		}

		tsfDetailsRepo.saveAll(tsfProducts);
		return "Products added successfully";
	}
}
