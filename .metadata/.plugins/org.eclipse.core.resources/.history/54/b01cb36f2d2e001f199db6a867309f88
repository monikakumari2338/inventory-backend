package com.inventory.myserviceimpl;

import java.util.HashMap;

import java.util.List;
import java.util.stream.Collector;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.inventory.myentity.AdhocStockCount;
import com.inventory.myentity.ProductDetails;
import com.inventory.myentity.PurchaseOrder;
import com.inventory.myentity.PurchaseOrderItems;
import com.inventory.myentity.SaveStockCountInfo;
import com.inventory.myentity.SaveStockCountProducts;
import com.inventory.myentity.StockCountCreation;
import com.inventory.myentity.Stores;
import com.inventory.myentity.TsfHead;
import com.inventory.myrepository.AdhocStockCountRepo;
import com.inventory.myrepository.ProductDetailsRepo;
import com.inventory.myrepository.PurchaseOrderItemsRepo;
import com.inventory.myrepository.PurchaseOrderRepo;
import com.inventory.myrepository.SaveStockInfoRepo;
import com.inventory.myrepository.SaveStockProductsRepo;
import com.inventory.myrepository.StockCreationRepo;
import com.inventory.myrepository.StoreRepo;
import com.inventory.myrepository.TsfHeadRepo;
import com.inventory.myservice.DashboardService;

import java.time.LocalDate;
import java.time.format.DateTimeFormatter;

@Service
public class DashboardServiceImpl implements DashboardService {

	@Autowired
	private StoreRepo storeRepo;

	@Autowired
	private ProductDetailsRepo productDetailsRepo;

	@Autowired
	private TsfHeadRepo tsfHeadRepo;

	@Autowired
	private SaveStockInfoRepo saveStockInfoRepo;

	@Autowired
	private SaveStockProductsRepo saveStockProductsRepo;

	@Autowired
	private AdhocStockCountRepo adhocStockCountRepo;

	@Autowired
	private PurchaseOrderItemsRepo itemsRepo;

	@Autowired
	private PurchaseOrderRepo purchaseOrderRepo;

	@Autowired
	private StockCreationRepo creationRepo;

	@Override
	public HashMap<String, Integer> getInTransfers(String store) {

		int newRequest = 0;
		int accepted = 0;
		int shipped = 0;
		int delivered = 0;
		List<TsfHead> tsfList = tsfHeadRepo.findAllByStoreTo(store);

		for (int i = 0; i < tsfList.size(); i++) {
			String status = tsfList.get(i).getStatus();

			if (status.equals("New Request")) {
				newRequest = newRequest + 1;
			} else if (status.equals("Accepted")) {
				accepted = accepted + 1;
			} else if (status.equals("Shipped")) {
				shipped = shipped + 1;
			} else if (status.equals("Delivered")) {
				delivered = delivered + 1;
			}

		}
		HashMap<String, Integer> hashMap = new HashMap<>();

		hashMap.put("newRequest", newRequest);
		hashMap.put("accepted", accepted);
		hashMap.put("shipped", shipped);
		hashMap.put("delivered", delivered);
		return hashMap;
	}

	@Override
	public HashMap<String, Integer> getOutTransfers(String store) {

		int newRequest = 0;
		int accepted = 0;
		int shipped = 0;
		int delivered = 0;
		List<TsfHead> tsfList = tsfHeadRepo.findAllByStoreFrom(store);

		for (int i = 0; i < tsfList.size(); i++) {
			String status = tsfList.get(i).getStatus();

			if (status.equals("New Request")) {
				newRequest = newRequest + 1;
			} else if (status.equals("Accepted")) {
				accepted = accepted + 1;
			} else if (status.equals("Shipped")) {
				shipped = shipped + 1;
			} else if (status.equals("Delivered")) {
				delivered = delivered + 1;
			}

		}

		HashMap<String, Integer> hashMap = new HashMap<>();

		hashMap.put("newRequest", newRequest);
		hashMap.put("accepted", accepted);
		hashMap.put("shipped", shipped);
		hashMap.put("delivered", delivered);
		return hashMap;
	}

	@Override
	public HashMap<String, Integer> getCategoryWiseVariance(String storeName) {

		int sportsWearVariance = 0;
		int sportsWearCountedQty = 0;
		int WomenwearVariance = 0;
		int WomenwearCountedQty = 0;
		int FootwearVariance = 0;
		int FootwearCountedQty = 0;
		int HandbagsVariance = 0;

//		int sportsWearCount = 0;
//		int WomenwearCount = 0;
//		int FootwearCount = 0;
//		int HandbagsCount = 0;
		
		DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd-MM-yyyy");
		LocalDate currentDateInLocalDate = LocalDate.now();// .format(formatter);
		LocalDate pastDateInLocalDate = currentDateInLocalDate.minusMonths(1);

		String currentDate = currentDateInLocalDate.format(formatter);
		String pastDate = pastDateInLocalDate.format(formatter);

		List<SaveStockCountInfo> product = saveStockInfoRepo.findByDateRange(pastDate, currentDate);

		for (int j = 0; j < product.size(); j++) {

			if (product.get(j).getCategory().equals("Sportswear")) {

				sportsWearVariance = sportsWearVariance + product.get(j).getVarianceQty();
				sportsWearCount++;
			}
			if (product.get(j).getCategory().equals("Womenwear")) {

				WomenwearVariance = WomenwearVariance + product.get(j).getVarianceQty();
				WomenwearCount++;
			}
			if (product.get(j).getCategory().equals("Footwear")) {

				FootwearVariance = FootwearVariance + product.get(j).getVarianceQty();
				FootwearCount++;
			}
			if (product.get(j).getCategory().equals("Handbags")) {

				HandbagsVariance = HandbagsVariance + product.get(j).getVarianceQty();
				HandbagsCount++;
			}

		}

		List<AdhocStockCount> products = adhocStockCountRepo.findByCreationDateBetween(pastDateInLocalDate,
				currentDateInLocalDate);

		for (int j = 0; j < products.size(); j++) {
			if (products.get(j).getCategory().equals("Sportswear")) {

				sportsWearVariance = sportsWearVariance + products.get(j).getVarianceQty();
				sportsWearCount++;
			}
			if (products.get(j).getCategory().equals("Womenwear")) {

				WomenwearVariance = WomenwearVariance + products.get(j).getVarianceQty();
				WomenwearCount++;
			}
			if (products.get(j).getCategory().equals("Footwear")) {

				FootwearVariance = FootwearVariance + products.get(j).getVarianceQty();
				FootwearCount++;
			}
			if (products.get(j).getCategory().equals("Handbags")) {

				HandbagsVariance = HandbagsVariance + products.get(j).getVarianceQty();
				HandbagsCount++;
			}
		}

		HashMap<String, Integer> hashMap = new HashMap<>();

//		hashMap.put("sportsWearBookQty", sportsWearBookQty);
//		hashMap.put("sportsWearCountedQty", sportsWearCountedQty);
//		hashMap.put("WomenwearbookQty", WomenwearbookQty);
//		hashMap.put("WomenwearCountedQty", WomenwearCountedQty);
//		hashMap.put("FootwearbookQty", FootwearbookQty);
//		hashMap.put("FootwearCountedQty", FootwearCountedQty);
//		hashMap.put("HandbagsbookQty", HandbagsbookQty);
//		hashMap.put("HandbagsCountedQty", HandbagsCountedQty);
//
//		System.out.println("sportsWearBookQty : " + sportsWearBookQty);
//		System.out.println("sportsWearCount : " + sportsWearCount);

		return hashMap;

	}

	@Override
	public HashMap<String, Integer> getInventoryDiscrepancyRatio(String store) {

		int stockOk = 0;
		int excess = 0;
		int shortQty = 0;
		int damaged = 0;

		// DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd-MM-yyyy");
		LocalDate currentDateInLocalDate = LocalDate.now();// .format(formatter);
		LocalDate pastDateInLocalDate = currentDateInLocalDate.minusMonths(1);

//		String currentDate = currentDateInLocalDate.format(formatter);
//		String pastDate = pastDateInLocalDate.format(formatter);

		List<PurchaseOrder> PO = purchaseOrderRepo.findByCreationDateBetweenAndStoreLocation(pastDateInLocalDate,
				currentDateInLocalDate, store);

		for (int i = 0; i < PO.size(); i++) {

			List<PurchaseOrderItems> products = itemsRepo.findAllByPurchaseOrder(PO.get(i));

			for (int j = 0; j < products.size(); j++) {
				if (products.get(j).getReceivedQty() > products.get(j).getExpectedQty()) {
					excess = excess + (products.get(j).getReceivedQty() - products.get(j).getExpectedQty());

				}
				if (products.get(j).getReceivedQty() < products.get(j).getExpectedQty()) {
					shortQty = shortQty + (products.get(j).getExpectedQty() - products.get(j).getReceivedQty());

				}
				if (products.get(j).getDamageQty() != 0) {
					damaged = damaged + products.get(j).getDamageQty();
				}
				stockOk = stockOk + (products.get(j).getReceivedQty() - products.get(j).getDamageQty());
			}
		}

		HashMap<String, Integer> hashMap = new HashMap<>();

		hashMap.put("stockOk", stockOk);
		hashMap.put("excess", excess);
		hashMap.put("shortQty", shortQty);
		hashMap.put("damaged", damaged);
		return hashMap;
	}

	// My tasks API Function

	@Override
	public HashMap<String, Integer> getMyTasks(String storeName) {

		int sellableStock = 0;
		int NonsellableStock = 0;
		int pendingPO = 0;
		int CompletePO = 0;
		int shippedTransfers = 0;
		int CompleteTransfers = 0;
		int pendingStockCount = 0;
		int CompletedStockCount = 0;

		// DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd");
		LocalDate currentDateInLocalDate = LocalDate.now();// .format(formatter);
		LocalDate pastDateInLocalDate = currentDateInLocalDate.minusMonths(1);

//		String currentDate = currentDateInLocalDate.format(formatter);
//		String pastDate = pastDateInLocalDate.format(formatter);

		Stores store = storeRepo.findByStoreName(storeName);
		List<ProductDetails> items = productDetailsRepo.findAllByStore(store);

		// stock in hand
		for (int i = 0; i < items.size(); i++) {
			sellableStock = sellableStock + items.get(i).getSellableStock();
			NonsellableStock = NonsellableStock + items.get(i).getNonSellableStock();
		}

		List<PurchaseOrder> PO = purchaseOrderRepo.findByCreationDateBetweenAndStoreLocation(pastDateInLocalDate,
				currentDateInLocalDate, storeName);

		// Pending or Complete PO
		for (int i = 0; i < PO.size(); i++) {
			if (PO.get(i).getStatus().equals("pending")) {
				pendingPO = pendingPO + 1;

			} else {
				CompletePO = CompletePO + 1;
			}
		}

		// TransferReceive
		List<TsfHead> tsfList = tsfHeadRepo.findByCreationDateBetweenAndStoreTo(pastDateInLocalDate,
				currentDateInLocalDate, storeName);
		// System.out.println("tsfList : " + tsfList);
		for (int i = 0; i < tsfList.size(); i++) {
			if (tsfList.get(i).getStatus().equals("Shipped")) {
				shippedTransfers = shippedTransfers + 1;
			}
			if (tsfList.get(i).getStatus().equals("Delivered")) {
				CompleteTransfers = CompleteTransfers + 1;
			}
		}

		// StockCount
		List<StockCountCreation> stockCount = creationRepo.findByDateBetweenAndStore(pastDateInLocalDate,
				currentDateInLocalDate, storeName);
		System.out.println("stockCount :" + stockCount);
		for (int i = 0; i < stockCount.size(); i++) {
			if (stockCount.get(i).getReCount().equals("complete") && stockCount.get(i).getStatus().equals("complete")) {
				CompletedStockCount = CompletedStockCount + 1;
			} else {
				pendingStockCount = pendingStockCount + 1;
			}
		}
		HashMap<String, Integer> hashMap = new HashMap<>();

		hashMap.put("sellableStock", sellableStock);
		hashMap.put("NonsellableStock", NonsellableStock);
		hashMap.put("pendingPO", pendingPO);
		hashMap.put("CompletePO", CompletePO);
		hashMap.put("shippedTransfers", shippedTransfers);
		hashMap.put("CompleteTransfers", CompleteTransfers);
		hashMap.put("pendingStockCount", pendingStockCount);
		hashMap.put("CompletedStockCount", CompletedStockCount);
		return hashMap;

	}

}
