package com.inventory.myserviceimpl;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.inventory.mydto.TSFCombinedDto;
import com.inventory.myentity.TsfDetails;
import com.inventory.myentity.TsfHead;
import com.inventory.myentity.TsfReasonCodes;
import com.inventory.myrepository.ProductDetailsRepo;
import com.inventory.myrepository.ProductRepo;
import com.inventory.myrepository.StoreRepo;
import com.inventory.myrepository.TsfDetailsRepo;
import com.inventory.myrepository.TsfHeadRepo;
import com.inventory.myrepository.TsfReasonCodesRepo;
import com.inventory.myservice.TransferReceiveService;

@Service
public class TransferReceiveServiceImpl implements TransferReceiveService {

	@Autowired
	private TsfHeadRepo tsfHeadRepo;

	@Autowired
	private StoreRepo storeRepo;

	@Autowired
	private TsfDetailsRepo tsfDetailsRepo;

	@Autowired
	private TsfReasonCodesRepo tsfReasonCodesRepo;

	@Autowired
	private ProductRepo productRepo;

	@Autowired
	private ProductDetailsRepo productDetailsRepo;

	// function to get All TSF Reason Codes
	@Override
	public List<TsfReasonCodes> getTsfReasonCodes() {
		List<TsfReasonCodes> tsfReasonCodes = tsfReasonCodesRepo.findAll();
		return tsfReasonCodes;
	}

	// Function to create Transfer
	@Override
	public String createTansfer(TSFCombinedDto tsfCombinedDto, String store) {

		TsfHead tsf = new TsfHead("TSFid101010", tsfCombinedDto.getTsfHeadDto().getStoreFrom(),
				tsfCombinedDto.getTsfHeadDto().getStoreTo(), tsfCombinedDto.getTsfHeadDto().getReasonCode(),
				tsfCombinedDto.getTsfHeadDto().getStatus(), tsfCombinedDto.getTsfHeadDto().getAttachedProof(),
				tsfCombinedDto.getTsfHeadDto().getTotalReqQty(), tsfCombinedDto.getTsfHeadDto().getCreationDate(),
				tsfCombinedDto.getTsfHeadDto().getApprovedDate(), tsfCombinedDto.getTsfHeadDto().getNotAfter(),
				tsfCombinedDto.getTsfHeadDto().getNotBefore(), tsfCombinedDto.getTsfHeadDto().getDeliveryDate(),
				tsfCombinedDto.getTsfHeadDto().getClosedDate());

		tsf = tsfHeadRepo.save(tsf);

		List<TsfDetails> tsfProducts = new ArrayList<>();
		for (int i = 0; i < tsfCombinedDto.getTsfDetailsDto().size(); i++) {
			tsfProducts.add(new TsfDetails(tsfCombinedDto.getTsfDetailsDto().get(i).getItemNumber(),
					tsfCombinedDto.getTsfDetailsDto().get(i).getItemName(),
					tsfCombinedDto.getTsfDetailsDto().get(i).getCategory(),
					tsfCombinedDto.getTsfDetailsDto().get(i).getColor(),
					tsfCombinedDto.getTsfDetailsDto().get(i).getPrice(),
					tsfCombinedDto.getTsfDetailsDto().get(i).getSize(),
					tsfCombinedDto.getTsfDetailsDto().get(i).getRequestedQty(),
					tsfCombinedDto.getTsfDetailsDto().get(i).getApprovedQty(),
					tsfCombinedDto.getTsfDetailsDto().get(i).getShippedQty(),
					tsfCombinedDto.getTsfDetailsDto().get(i).getReceivedQty(),
					tsfCombinedDto.getTsfDetailsDto().get(i).getDamageQty(),
					tsfCombinedDto.getTsfDetailsDto().get(i).getDamageProof(),
					tsfCombinedDto.getTsfDetailsDto().get(i).getImageData(),
					tsfCombinedDto.getTsfDetailsDto().get(i).getUpc(),
					tsfCombinedDto.getTsfDetailsDto().get(i).getSku(),
					tsfCombinedDto.getTsfDetailsDto().get(i).getTaxPercentage(),
					tsfCombinedDto.getTsfDetailsDto().get(i).getTaxCode(), tsf));
		}

		tsfDetailsRepo.saveAll(tsfProducts);
		return "Products saved successfully";
	}
	
	@Override
	public String generateTsfId() {
		final String CHARACTERS = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
		final SecureRandom random = new SecureRandom();
		StringBuilder sb = new StringBuilder(10);
		sb.append("PO-");
		for (int i = 0; i < 12; i++) {
			sb.append(CHARACTERS.charAt(random.nextInt(CHARACTERS.length())));

		}
		return sb.toString();
	}

}
